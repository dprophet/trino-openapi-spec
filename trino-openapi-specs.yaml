openapi: 3.0.1
info:
  title: Trino Client API
  version: '1.0.2'
  description: API for submitting SQL queries and managing their lifecycle in Trino.

servers:
  - url: https://{host}/v1
    variables:
      host:
        default: localhost:8080

paths:
  /statement:
    post:
      summary: Submit a SQL query
      operationId: submitQuery
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: "SELECT * FROM table"
      responses:
        '200':
          description: Query submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: "The unique identifier for the query."
                    example: "20241024_173206_01214_ghbut"
                  infoUri:
                    type: string
                    description: "URI to view the query in the Trino web UI."
                    example: "https://{host}/ui/query.html?20241024_173206_01214_ghbut"
                  nextUri:
                    type: string
                    description: "URI to retrieve the next set of results or check query progress. This URI is composed of {queryId}/{slug}/{token}""
                    example: "https://{host}/v1/statement/queued/20241024_173206_01214_ghbut/y567a46c99a7e6c7edf4eddff71c7911a98d76e19/1"
                  stats:
                    $ref: '#/components/schemas/QueryStats'
                  warnings:
                    type: array
                    description: "List of warnings for the query."
                    items:
                      type: string
                    example: []
        '401':
          description: Unauthorized
          headers:
            WWW-Authenticate:
              schema:
                type: string
                description: |
                  Contains authentication schemes and URLs for OAuth and Basic Authentication.
          content:
            text/plain:
              schema:
                type: string
                example: "Unauthorized"
      parameters:
        - name: X-Trino-User
          in: header
          required: true
          description: "The user submitting the query."
          schema:
            type: string
        - name: X-Trino-Original-User
          in: header
          description: "The original user on whose behalf the query is submitted."
          schema:
            type: string
        - name: X-Trino-Source
          in: header
          description: "The source of the query, used for logging and debugging."
          schema:
            type: string
        - name: X-Trino-Catalog
          in: header
          description: "The catalog to query."
          schema:
            type: string
        - name: X-Trino-Schema
          in: header
          description: "The schema within the catalog to query."
          schema:
            type: string
        - name: X-Trino-Time-Zone
          in: header
          description: "The client's time zone for timestamp and time functions."
          schema:
            type: string
        - name: X-Trino-Language
          in: header
          description: "The client's preferred language for error messages."
          schema:
            type: string
        - name: X-Trino-Transaction-Id
          in: header
          description: "The transaction ID, if any, associated with the query."
          schema:
            type: string
        - name: X-Trino-Client-Capabilities
          in: header
          description: "List of features supported by the client."
          schema:
            type: string

  /statement/{nextUri}:
    get:
      summary: Get the next set of results for a query
      operationId: getNextResults
      parameters:
        - in: path
          name: nextUri
          schema:
            type: string
          required: true
          description: "The next URI retrieved from the previous query response."
      responses:
        '200':
          description: Successful retrieval of the next set of results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResponse'
      parameters:
        - name: X-Trino-User
          in: header
          required: true
          description: "The user who initiated the query."
          schema:
            type: string
            example: "jonny123"
        - name: X-Trino-Original-User
          in: header
          required: true
          description: "The original user for whom the query is being executed."
          schema:
            type: string
            example: "jonny123"
        - name: Authorization
          in: header
          required: true
          description: "Bearer token for authentication."
          schema:
            type: string
            example: "Bearer {token}"

components:
  schemas:
    QueryResponse:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the query."
        infoUri:
          type: string
          description: "URI for the web UI where query details can be viewed."
        nextUri:
          type: string
          description: |
            URI to retrieve the next set of results.
            It could indicate the next state of the query (e.g., queued, executing).
            Example:
              - /v1/statement/queued/{queryId}
              - /v1/statement/executing/{queryId}
        partialCancelUri:
          type: string
          description: "URI to partially cancel a running query."
        stats:
          $ref: '#/components/schemas/QueryStats'
    QueryResults:
      type: object
      properties:
        columns:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                description: "The name of the column."
              type:
                type: string
                description: |
                  "The data type of the column, with possible values such as:
                  - varchar(n)
                  - bigint
                  - boolean
                  - timestamp
                  - array
                  - row
                  Refer to the Trino documentation for a full list of supported types."
              typeSignature:
                type: object
                properties:
                  rawType:
                    type: string
                    description: "The raw data type."
                  arguments:
                    type: array
                    items:
                      type: object
                      properties:
                        kind:
                          type: string
                          description: "The kind of argument, e.g., LONG."
                        value:
                          type: integer
                          description: "The value associated with the type argument."
        data:
          type: array
          description: "The rows of data returned by the query."
          items:
            type: array
            items:
              type: string
    QueryStats:   
      type: object
      description: "Query execution statistics."
      properties:
        completedSplits:
          type: integer
          description: "Number of splits that have completed."
          example: 0
        cpuTimeMillis:
          type: integer
          description: "CPU time used by the query."
          example: 0
        elapsedTimeMillis:
          type: integer
          description: "Total time elapsed since the query started."
          example: 0
        nodes:
          type: integer
          description: "Number of nodes involved in the query."
          example: 0
        peakMemoryBytes:
          type: integer
          description: "The peak memory usage for the query."
          example: 0
        physicalInputBytes:
          type: integer
          description: "Bytes read from disk or network."
          example: 0
        physicalWrittenBytes:
          type: integer
          description: "Bytes written to disk or network."
          example: 0
        processedBytes:
          type: integer
          description: "Total bytes processed by the query."
          example: 0
        processedRows:
          type: integer
          description: "Total rows processed by the query."
          example: 0
        queued:
          type: boolean
          description: "Indicates if the query is queued."
          example: true
        queuedSplits:
          type: integer
          description: "Number of splits currently queued."
          example: 0
        queuedTimeMillis:
          type: integer
          description: "Total time the query has spent in the queue."
          example: 0
        runningSplits:
          type: integer
          description: "Number of splits currently running."
          example: 0
        scheduled:
          type: boolean
          description: "Indicates if the query is scheduled."
          example: false
        spilledBytes:
          type: integer
          description: "Total bytes spilled to disk."
          example: 0
        state:
          type: string
          description: "Current state of the query (e.g., QUEUED, RUNNING, etc.)."
          example: "QUEUED"
        totalSplits:
          type: integer
          description: "Total number of splits for the query."
          example: 0
        wallTimeMillis:
          type: integer
          description: "Total wall clock time elapsed since the query started."
          example: 0
